services:
  folink_db:
    image: postgres:latest
    container_name: folink_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USERNAME:-srfn}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-root}
      POSTGRES_DB: ${DB_SCHEMA:-link}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  folink_redis:
    image: redis:latest
    container_name: folink_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    environment:
      - REDIS_HOST=${REDIS_HOST:-localhost}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_TTL=${REDIS_TTL:-3600}

  folink_app:
    container_name: folink_app
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      folink_db:
        condition: service_healthy
      folink_redis:
        condition: service_started
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - DATABASE_URL=postgres://${DB_USERNAME:-srfn}:${DB_PASSWORD:-root}@folink_db:5432/${DB_SCHEMA:-link}
      - REDIS_HOST=folink_redis
      - REDIS_PORT=6379
      - REDIS_TTL=${REDIS_TTL:-3600}
      - JWT_SECRET=${JWT_SECRET:-JWT}
      - SWAGGER_USER=${SWAGGER_USER:-user}
      - SWAGGER_PW=${SWAGGER_PW:-root}
      - GEMINI_API_KEY=${GEMINI_API_KEY:-AIzaSyCw9l1Bf77DMOMMe5YkUmhKzI9T0_4Rwds}
    volumes:
      - .:/app
      - /app/node_modules

volumes:
  pgdata:
  redisdata: